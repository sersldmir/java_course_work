package com.example.demo;

import java.util.Set;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;


/** Этот класс, который представляет сущность в базе
* данных. Аннотация `@Entity` указывает, что этот класс является сущностью, а аннотация `@Table(name =
* "suppliers")` указывает имя таблицы базы данных, которая соответствует этой сущности. Кроме того, существует аннотация `@OneToMany`,
* которая указывает отношение «один ко многим» между этим классом и реусрсом
*/
@Entity
@Table(name = "suppliers")
public class Supplier {

    /** `@Column(name = "suid")` — это аннотация, определяющая сопоставление между столбцом базы данных и
    // полем или свойством в классе Java. В этом случае он сопоставляет поле «suid» со столбцом с именем
    // «suid» в таблице базы данных. Строка объявляет частное поле `suid` типа `Long`,
    // представляющее собой идентификатор поставщика.
    */
    @Column(name = "supid")
    private Long supid;

    /** Аннотация @Column(name = "name") используется для сопоставления поля "name" класса "Supplier" со
    * столбцом с именем "name" в соответствующей таблице базы данных. Эта аннотация используется для
    * указания сведений о столбце, с которым должно быть сопоставлено поле, таких как имя столбца, тип
    * данных, длина и т. д. В этом случае она указывает, что поле «имя» должно быть сопоставлено со
    * столбцом. с именем `name` в таблице `suppliers`. Строка объявляет частное поле `sname` типа `String`,
    * представляющее собой имя/название поставщика.
    */
    @Column(name = "name")
    private String name;

    /** Этот код объявляет частное поле `phone` типа `String`, которое представляет собой мобильный номер телефона поставщика, и сопоставляет его со
    * столбцом с именем `phone` в соответствующей таблице базы данных, используя аннотацию `@Column`. Это
    * позволяет сохранить поле «телефон» в базе данных как часть объекта `Supplier`.
    */
    @Column(name = "phone")
    private String phone;

    /** Этот код объявляет частное поле `email` типа `String`, которое представляет собой электронную почту поставщика, и сопоставляет его со
    * столбцом с именем `email` в соответствующей таблице базы данных, используя аннотацию `@Column`. Это
    * позволяет сохранить поле `email` в базе данных как часть объекта `Supplier`.
    */
    @Column(name = "email")
    private String email;

    /** Этот код объявляет отношение «один ко многим» между сущностью «Поставщик» и сущностью «Ресурс».
    * Аннотация `@OneToMany` указывает, что у поставщика может быть много ресурсов, а для атрибута `fetch`
    * установлено значение `LAZY`, что означает, что ресурсы будут загружаться из базы данных только при
    * доступе к ним. Атрибут targetEntity определяет тип связанного объекта, которым в данном случае
    * является Resource. Атрибут mappedBy указывает имя поля в сущности Resource, которое сопоставляется с
    * сущностью Supplier, которая является полем resid. Атрибут orphanRemoval имеет значение false, что
    * означает, что ресурсы не будут автоматически удаляться из базы данных при их удалении из коллекции
    * ресурсов поставщика. Данное поле представляет собой множество объектов типа «Ресурс»
    */
    @OneToMany(fetch=FetchType.LAZY, targetEntity=Resource.class, mappedBy = "resid", orphanRemoval = false)
    private Set<Resource> resources;

    /** Конструктор по умолчанию для класса `Supplier`. Он помечен
    * как «защищенный», чтобы предотвратить доступ к нему за пределами класса или его подклассов. Этот
    * конструктор используется поставщиком JPA для создания экземпляров класса Supplier при извлечении
    * данных из базы данных.
    */
    protected Supplier() {}

    /**
     * Эта функция возвращает идентификатор поставщика, сгенерированный с использованием стратегии
     * идентификации в Java. Аннотации `@Id` и `@GeneratedValue` указывают, что этот метод используется для извлечения значения первичного
     * ключа для объекта и что это значение создается автоматически базой данных.
     * 
     * @return Идентификатор поставщика типа `Long`.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    public Long getSupid() {
        return supid;
    }

    /**
     * Функция возвращает имя/название поставщика.
     * 
     * @return Строка с именем/названием поставщика.
     */
    public String getName() {
        return name;
    }

    /**
     * Функция возвращает номер телефона поставщика.
     * 
     * @return Строка с номером телефона поставщика.
     */
    public String getPhone() {
        return phone;
    }

    /**
     * Функция возвращает адрес электронной почты.
     * 
     * @return Строка с адресом электронной почты.
     */
    public String getEmail() {
        return email;
    }

    /**
     * Функция устанавливает значение идентификатора поставщика.
     * 
     * @param supid Идентификатор поставщика типа `Long`.
     */
    public void setSupid(Long supid) {
        this.supid = supid;
    }

    /**
     * Функция устанавливает имя/название поставщика.
     * 
     * @param name Параметр типа String, в котором содержися имя/название поставщика 
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Эта функция устанавливает мобильный телефон поставщика.
     * 
     * @param phone Строка, представляющая номер телефона
     */
    public void setPhone(String phone) {
        this.phone = phone;
    }

    /**
     * Эта функция устанавливает адрес электронной почты поставщика.
     * 
     * @param email Строка, представляющая адрес электронной почты.
     */
    public void setEmail(String email) {
        this.email = email;
    }
}
